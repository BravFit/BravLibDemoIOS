#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef BRAVLIB_SWIFT_H
#define BRAVLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BravLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, BleEnableState, closed) {
  BleEnableStateUnknown = 0,
  BleEnableStateEnable = 1,
  BleEnableStateDisable = 2,
  BleEnableStateUnauthorized = 3,
};

@class NSNumber;
@class NSString;
@class NSUUID;

SWIFT_PROTOCOL_NAMED("BravDeviceHandlerBle")
@protocol BravDeviceHandlerBle
/// <ul>
///   <li>
///     作为外设设备，发射广播数据，这里只能发射服务ID段的数据
///   </li>
/// </ul>
- (void)doAdvertisingWithAdvertiseData:(NSArray<NSNumber *> * _Nonnull)advertiseData;
/// 停止发送广播
- (void)stopAdvertising;
/// 关闭某个设备
- (void)closeDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
/// 使能某个设备
- (void)notifyWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 使能某个设备
- (void)indicateWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 写入数据
- (void)writeDataWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID data:(NSArray<NSNumber *> * _Nonnull)data;
@end

@protocol BravNativeDeviceDelegate;
@class BravScanOptions;
@class BravResult;

SWIFT_PROTOCOL_NAMED("BleNative")
@protocol BleNative <BravDeviceHandlerBle>
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
/// 设置设备扫描回调监听器
- (void)onNativeEventListenerWithListener:(id <BravNativeDeviceDelegate> _Nonnull)listener;
/// 本地初始化方法
- (void)initBle SWIFT_METHOD_FAMILY(none);
/// 启动扫描
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// 停止扫描
- (void)stopScan;
/// 连接设备，而后自动发现设备服务
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
/// 断开某个设备的连接
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
@end

@class CBCentralManager;
@class CBPeripheral;
@class CBPeripheralManager;

SWIFT_CLASS("_TtC7BravLib13BleNativeImpl")
@interface BleNativeImpl : NSObject <BleNative, CBCentralManagerDelegate, CBPeripheralManagerDelegate>
- (nonnull instancetype)init;
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
- (void)onNativeEventListenerWithListener:(id <BravNativeDeviceDelegate> _Nonnull)listener;
- (void)initBle SWIFT_METHOD_FAMILY(none);
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
- (void)stopScan;
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)doAdvertisingWithAdvertiseData:(NSArray<NSNumber *> * _Nonnull)advertiseData;
- (void)stopAdvertising;
- (void)closeDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)notifyWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)indicateWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)writeDataWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID data:(NSArray<NSNumber *> * _Nonnull)data;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * _Nonnull)peripheral;
@end

@protocol BravBleApi;

SWIFT_CLASS_NAMED("BravApiProvider")
@interface BravApiProvider : NSObject
+ (void)initSharedBleApi SWIFT_METHOD_FAMILY(none);
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <BravBleApi> _Nonnull sharedBleApi;)
+ (id <BravBleApi> _Nonnull)sharedBleApi SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BravBleEventDelegate;
@class BravDevice;
@protocol BravDeviceEventDelegate;
@protocol BravBleConnectionChangeDelegate;

SWIFT_PROTOCOL_NAMED("BravBleApi")
@protocol BravBleApi
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
@property (nonatomic, strong) id <BravBleEventDelegate> _Nullable bleEventDelegate;
/// 释放资源的方法
- (void)close;
/// 启动扫描
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// 停止扫描
- (void)stopScan;
/// 连接设备，并返回设备处理器
- (BravResult * _Nonnull)connectDeviceWithBravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
/// 连接设备，并返回设备处理器，以deviceId为参数
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
/// 断开连接
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
@end


SWIFT_CLASS_NAMED("BravBleCharacteristic")
@interface BravBleCharacteristic : NSObject
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum BravDeviceConnectionState : NSInteger;

SWIFT_PROTOCOL_NAMED("BravBleConnectionChangeDelegate")
@protocol BravBleConnectionChangeDelegate
- (void)onConnectionChangeWithDeviceId:(NSString * _Nonnull)deviceId state:(enum BravDeviceConnectionState)state;
@end


SWIFT_PROTOCOL_NAMED("BravBleEventDelegate")
@protocol BravBleEventDelegate <BravBleConnectionChangeDelegate>
/// <ul>
///   <li>
///     蓝牙使能状态变化
///   </li>
/// </ul>
- (void)onBleEnableStateChangeWithState:(enum BleEnableState)state;
/// 出现新的Brav蓝牙设备
- (void)onBravDeviceFoundWithDevice:(BravDevice * _Nonnull)device;
@end


SWIFT_CLASS_NAMED("BravBleService")
@interface BravBleService : NSObject
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSArray<BravBleCharacteristic *> * _Nonnull characteristics;
- (nonnull instancetype)init:(NSUUID * _Nonnull)uuid characteristics:(NSArray<BravBleCharacteristic *> * _Nonnull)characteristics OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BravBleTransferType, closed) {
  BravBleTransferTypeBleConnection = 0,
  BravBleTransferTypeBroadcast = 1,
};

@class BravNativeDevice;
enum BravDeviceProfileType : NSInteger;
enum BravDeviceCategory : NSInteger;

SWIFT_CLASS_NAMED("BravDevice")
@interface BravDevice : NSObject
- (nonnull instancetype)init:(BravNativeDevice * _Nonnull)nativeDevice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, strong) BravNativeDevice * _Nonnull nativeDevice;
@property (nonatomic) enum BravBleTransferType transferType;
@property (nonatomic, copy) NSString * _Nonnull mac;
@property (nonatomic, copy) NSString * _Nonnull modelId;
@property (nonatomic) enum BravDeviceProfileType profileType;
@property (nonatomic) enum BravDeviceCategory category;
@property (nonatomic, copy) NSString * _Nonnull profileId;
@property (nonatomic, readonly) BOOL isBroadcast;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly) NSInteger rssi;
@end

typedef SWIFT_ENUM(NSInteger, BravDeviceCategory, closed) {
  BravDeviceCategoryScale = 0,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BravDeviceConnectionState, "BravDeviceConnectionState", closed) {
  BravDeviceConnectionStateDisconnected = 0,
  BravDeviceConnectionStateConnecting = 1,
  BravDeviceConnectionStateConnected = 2,
  BravDeviceConnectionStateDisconnecting = 3,
};


SWIFT_PROTOCOL_NAMED("BravDeviceEventDelegate")
@protocol BravDeviceEventDelegate
@end


SWIFT_PROTOCOL_NAMED("BravDeviceHandler")
@protocol BravDeviceHandler
@property (nonatomic, readonly, strong) BravDevice * _Nonnull device;
@property (nonatomic, readonly, strong) id <BravBleConnectionChangeDelegate> _Nullable connectionChangeListener;
- (void)onDeviceReadyWithServices:(NSArray<BravBleService *> * _Nonnull)services;
/// 再次出现了该设备的广播信息，该方法用于广播设备的通讯
- (void)onFoundNativeDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice;
/// 解析蓝牙传输过来的数据，空实现,
- (void)decodeDataWithData:(NSArray<NSNumber *> * _Nonnull)data serviceUUid:(NSUUID * _Nonnull)serviceUUid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 关闭掉协议解析，释放资源
- (void)close;
@end



SWIFT_PROTOCOL_NAMED("BravDeviceProfile")
@protocol BravDeviceProfile
@property (nonatomic, readonly, copy) NSString * _Nonnull profileId;
/// <ul>
///   <li>
///     传入原生扫描数据，判断是否可以
///   </li>
/// </ul>
- (BravDevice * _Nullable)acceptDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice SWIFT_WARN_UNUSED_RESULT;
/// 传入设备，返回该设备的处理器
- (id <BravDeviceHandler> _Nonnull)generateHandlerWithHandlerBle:(id <BravDeviceHandlerBle> _Nonnull)handlerBle bravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, BravDeviceProfileType, closed) {
  BravDeviceProfileTypeBravBroadcastScale = 0,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BravErrorCode, "BravErrorCode", closed) {
  BravErrorCodeSuccess = 0,
  BravErrorCodeDeviceNotFound = 1,
  BravErrorCodeBluetoothDisabled = 2,
  BravErrorCodeBluetoothUnauthorized = 3,
  BravErrorCodeBluetoothNotInit = 4,
  BravErrorCodeDeviceProfileNotFind = 5,
};

typedef SWIFT_ENUM(NSInteger, BravGender, closed) {
  BravGenderFemale = 0,
  BravGenderMale = 1,
};

@protocol BravLoggerDelegate;

SWIFT_CLASS("_TtC7BravLib10BravLogger")
@interface BravLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_NONE;)
+ (NSInteger)LOG_LEVEL_NONE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_ERROR;)
+ (NSInteger)LOG_LEVEL_ERROR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_ALL;)
+ (NSInteger)LOG_LEVEL_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger loggerLevel;)
+ (NSInteger)loggerLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerLevel:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <BravLoggerDelegate> _Nullable loggerDelegate;)
+ (id <BravLoggerDelegate> _Nullable)loggerDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerDelegate:(id <BravLoggerDelegate> _Nullable)value;
@end


SWIFT_PROTOCOL_NAMED("BravLoggerDelegate")
@protocol BravLoggerDelegate
- (void)onLogWithTag:(NSString * _Nonnull)tag text:(NSString * _Nonnull)text;
- (void)onErrorWithTag:(NSString * _Nonnull)tag text:(NSString * _Nonnull)text;
@end


SWIFT_CLASS_NAMED("BravNativeDevice")
@interface BravNativeDevice : NSObject
@property (nonatomic, strong) CBPeripheral * _Null_unspecified peripheral;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull advertisementData;
@property (nonatomic) NSInteger rssi;
- (nonnull instancetype)init:(CBPeripheral * _Nullable)peripheral :(NSDictionary<NSString *, id> * _Nonnull)advertisementData :(NSInteger)rssi OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull manufacturerSpecificData;
@end


SWIFT_PROTOCOL_NAMED("BravNativeDeviceDelegate")
@protocol BravNativeDeviceDelegate
/// 蓝牙是否可用状态发生了变化
- (void)onNativeBleEnableChangeWithBleEnableState:(enum BleEnableState)bleEnableState;
/// 发现了本地蓝牙设备
- (void)onNativeDeviceFoundWithDevice:(BravNativeDevice * _Nonnull)device;
/// 本地蓝牙设备的蓝牙连接状态变化
- (void)onNativeDeviceConnectionChangeWithDeviceId:(NSString * _Nonnull)deviceId connectionState:(enum BravDeviceConnectionState)connectionState;
/// 设备发现服务完成
- (void)onNativeDeviceReadyWithDeviceId:(NSString * _Nonnull)deviceId services:(NSArray<BravBleService *> * _Nonnull)services;
/// 本地出现的设备回调
- (void)onNativeDeviceNotifyWithDeviceId:(NSString * _Nonnull)deviceId data:(NSArray<NSNumber *> * _Nonnull)data serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
@end


SWIFT_CLASS_NAMED("BravResult")
@interface BravResult : NSObject
@property (nonatomic) enum BravErrorCode code;
@property (nonatomic) id _Nullable data;
@property (nonatomic, readonly) BOOL isSuccess;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BravScaleAlgorithmMethod, closed) {
  BravScaleAlgorithmMethodCommon = 0,
  BravScaleAlgorithmMethodAsia = 1,
};

@class BravUser;
@class BravOriginData;
enum BravScaleUnit : NSInteger;

SWIFT_CLASS_NAMED("BravScaleData")
@interface BravScaleData : NSObject
@property (nonatomic, readonly, strong) BravUser * _Nonnull user;
@property (nonatomic, readonly, strong) BravOriginData * _Nonnull originData;
@property (nonatomic, readonly) enum BravScaleUnit weightUnit;
- (nonnull instancetype)initWithUser:(BravUser * _Nonnull)user originData:(BravOriginData * _Nonnull)originData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) double weight;
@property (nonatomic) double bmi;
@property (nonatomic) double bodyfatRate;
@property (nonatomic) double bodyfatMass;
@property (nonatomic) double subfatRate;
@property (nonatomic) double visfat;
@property (nonatomic) double waterRate;
@property (nonatomic) double waterMass;
@property (nonatomic) NSInteger bmr;
@property (nonatomic) double skeletalMuscleRate;
@property (nonatomic) double skeletalMuscleMass;
@property (nonatomic) double muscleMass;
@property (nonatomic) double muscleRate;
@property (nonatomic) double lbm;
@property (nonatomic) double bone;
@property (nonatomic) double proteinRate;
@property (nonatomic) double proteinMass;
@property (nonatomic) double score;
@property (nonatomic) NSInteger bodyAge;
@property (nonatomic) NSInteger bodyShape;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScaleDataOptions")
@interface BravScaleDataOptions : NSObject
/// 用户资料
@property (nonatomic, readonly, strong) BravUser * _Nonnull user;
/// 秤相关的单位
@property (nonatomic, readonly) enum BravScaleUnit unit;
- (nonnull instancetype)initWithUser:(BravUser * _Nonnull)user unit:(enum BravScaleUnit)unit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScaleDevce")
@interface BravScaleDevce : BravDevice
- (nonnull instancetype)init:(BravNativeDevice * _Nonnull)nativeDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL isScreenOn;
@property (nonatomic, copy) NSArray<NSNumber *> * _Null_unspecified appMac;
@property (nonatomic) double weight;
@property (nonatomic, readonly) BOOL isConnected;
@end


SWIFT_PROTOCOL_NAMED("BravScaleEventDelegate")
@protocol BravScaleEventDelegate <BravDeviceEventDelegate>
/// <ul>
///   <li>
///     回调非稳定重量数据
///   </li>
/// </ul>
- (void)onGetUnsteadyWeight:(NSString * _Nonnull)deviceId :(double)weight;
/// 回调完整的测量数据
- (void)onMeasureComplete:(NSString * _Nonnull)deviceId :(BravScaleData * _Nonnull)scaleData;
- (void)onGetOfflineData:(NSString * _Nonnull)deviceId :(NSArray<BravOriginData *> * _Nonnull)scaleDataList;
@end

@class NSDate;

SWIFT_CLASS_NAMED("BravScaleOriginData")
@interface BravOriginData : NSObject
@property (nonatomic) double weight;
@property (nonatomic) NSInteger impedance;
@property (nonatomic, copy) NSString * _Nonnull mac;
@property (nonatomic, copy) NSDate * _Nonnull times;
@property (nonatomic) enum BravScaleUnit unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(double)weight :(NSInteger)impedance :(NSString * _Nonnull)mac;
- (nonnull instancetype)init:(double)weight :(NSInteger)impedance :(NSString * _Nonnull)mac :(NSDate * _Nonnull)times;
@end

typedef SWIFT_ENUM(NSInteger, BravScaleUnit, closed) {
  BravScaleUnitKg = 0,
  BravScaleUnitJin = 1,
  BravScaleUnitLb = 2,
};


SWIFT_CLASS_NAMED("BravScaleUser")
@interface BravUser : NSObject
@property (nonatomic) enum BravGender gender;
@property (nonatomic) NSInteger height;
@property (nonatomic) NSInteger age;
@property (nonatomic) NSInteger athleteType;
@property (nonatomic) enum BravScaleAlgorithmMethod scaleAlgorithmMethod;
- (nonnull instancetype)initWithGender:(enum BravGender)gender height:(NSInteger)height age:(NSInteger)age OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithGender:(enum BravGender)gender height:(NSInteger)height age:(NSInteger)age athleteType:(NSInteger)athleteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScanOptions")
@interface BravScanOptions : NSObject
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic) NSInteger minRssi;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("BravUtils")
@interface BravUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (double)toPrecision:(double)value :(NSInteger)places SWIFT_WARN_UNUSED_RESULT;
+ (double)kg2jin:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)jin2kg:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)kg2lb:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)lb2kg:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)jin2lb:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)lb2jin:(double)value SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7BravLib21BroadcastScaleHandler")
@interface BroadcastScaleHandler : NSObject <BravDeviceHandler>
@property (nonatomic, readonly, strong) BravDevice * _Nonnull device;
@property (nonatomic, strong) id <BravBleConnectionChangeDelegate> _Nullable connectionChangeListener;
- (void)onDeviceReadyWithServices:(NSArray<BravBleService *> * _Nonnull)services;
- (void)onFoundNativeDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice;
- (void)decodeDataWithData:(NSArray<NSNumber *> * _Nonnull)data serviceUUid:(NSUUID * _Nonnull)serviceUUid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7BravLib21BroadcastScaleProfile")
@interface BroadcastScaleProfile : NSObject <BravDeviceProfile>
@property (nonatomic, readonly, copy) NSString * _Nonnull profileId;
- (BravDevice * _Nullable)acceptDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice SWIFT_WARN_UNUSED_RESULT;
- (id <BravDeviceHandler> _Nonnull)generateHandlerWithHandlerBle:(id <BravDeviceHandlerBle> _Nonnull)handlerBle bravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef BRAVLIB_SWIFT_H
#define BRAVLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BravLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, BleEnableState, closed) {
  BleEnableStateUnknown = 0,
  BleEnableStateEnable = 1,
  BleEnableStateDisable = 2,
  BleEnableStateUnauthorized = 3,
};

@class NSNumber;
@class NSString;
@class NSUUID;

SWIFT_PROTOCOL_NAMED("BravDeviceHandlerBle")
@protocol BravDeviceHandlerBle
/// <ul>
///   <li>
///     作为外设设备，发射广播数据，这里只能发射服务ID段的数据
///   </li>
/// </ul>
- (void)doAdvertisingWithAdvertiseData:(NSArray<NSNumber *> * _Nonnull)advertiseData;
/// 停止发送广播
- (void)stopAdvertising;
/// 关闭某个设备
- (void)closeDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
/// 使能某个设备
- (void)notifyWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 使能某个设备
- (void)indicateWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 写入数据
- (void)writeDataWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID data:(NSArray<NSNumber *> * _Nonnull)data;
@end

@protocol BravNativeDeviceDelegate;
@class BravScanOptions;
@class BravResult;

SWIFT_PROTOCOL_NAMED("BleNative")
@protocol BleNative <BravDeviceHandlerBle>
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
/// 设置设备扫描回调监听器
- (void)onNativeEventListenerWithListener:(id <BravNativeDeviceDelegate> _Nonnull)listener;
/// 本地初始化方法
- (void)initBle SWIFT_METHOD_FAMILY(none);
/// 启动扫描
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// 停止扫描
- (void)stopScan;
/// 连接设备，而后自动发现设备服务
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
/// 断开某个设备的连接
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
@end

@class CBCentralManager;
@class CBPeripheral;
@class CBPeripheralManager;

SWIFT_CLASS("_TtC7BravLib13BleNativeImpl")
@interface BleNativeImpl : NSObject <BleNative, CBCentralManagerDelegate, CBPeripheralManagerDelegate>
- (nonnull instancetype)init;
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
- (void)onNativeEventListenerWithListener:(id <BravNativeDeviceDelegate> _Nonnull)listener;
- (void)initBle SWIFT_METHOD_FAMILY(none);
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
- (void)stopScan;
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)doAdvertisingWithAdvertiseData:(NSArray<NSNumber *> * _Nonnull)advertiseData;
- (void)stopAdvertising;
- (void)closeDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)notifyWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)indicateWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)writeDataWithDeviceId:(NSString * _Nonnull)deviceId serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID data:(NSArray<NSNumber *> * _Nonnull)data;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * _Nonnull)peripheral;
@end

@protocol BravBleApi;

SWIFT_CLASS_NAMED("BravApiProvider")
@interface BravApiProvider : NSObject
+ (void)initSharedBleApi SWIFT_METHOD_FAMILY(none);
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <BravBleApi> _Nonnull sharedBleApi;)
+ (id <BravBleApi> _Nonnull)sharedBleApi SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BravBleEventDelegate;
@class BravDevice;
@protocol BravDeviceEventDelegate;
@protocol BravBleConnectionChangeDelegate;

SWIFT_PROTOCOL_NAMED("BravBleApi")
@protocol BravBleApi
@property (nonatomic, readonly) enum BleEnableState bleEnableState;
@property (nonatomic, strong) id <BravBleEventDelegate> _Nullable bleEventDelegate;
/// 释放资源的方法
- (void)close;
/// 启动扫描
- (BravResult * _Nonnull)startScanWithOptions:(BravScanOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// 停止扫描
- (void)stopScan;
/// 连接设备，并返回设备处理器
- (BravResult * _Nonnull)connectDeviceWithBravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
/// 连接设备，并返回设备处理器，以deviceId为参数
- (BravResult * _Nonnull)connectDeviceWithDeviceId:(NSString * _Nonnull)deviceId options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
/// 断开连接
- (void)disconnectDeviceWithDeviceId:(NSString * _Nonnull)deviceId;
@end


SWIFT_CLASS_NAMED("BravBleCharacteristic")
@interface BravBleCharacteristic : NSObject
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum BravDeviceConnectionState : NSInteger;

SWIFT_PROTOCOL_NAMED("BravBleConnectionChangeDelegate")
@protocol BravBleConnectionChangeDelegate
- (void)onConnectionChangeWithDeviceId:(NSString * _Nonnull)deviceId state:(enum BravDeviceConnectionState)state;
@end


SWIFT_PROTOCOL_NAMED("BravBleEventDelegate")
@protocol BravBleEventDelegate <BravBleConnectionChangeDelegate>
/// <ul>
///   <li>
///     蓝牙使能状态变化
///   </li>
/// </ul>
- (void)onBleEnableStateChangeWithState:(enum BleEnableState)state;
/// 出现新的Brav蓝牙设备
- (void)onBravDeviceFoundWithDevice:(BravDevice * _Nonnull)device;
@end


SWIFT_CLASS_NAMED("BravBleService")
@interface BravBleService : NSObject
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
@property (nonatomic, readonly, copy) NSArray<BravBleCharacteristic *> * _Nonnull characteristics;
- (nonnull instancetype)init:(NSUUID * _Nonnull)uuid characteristics:(NSArray<BravBleCharacteristic *> * _Nonnull)characteristics OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BravBleTransferType, closed) {
  BravBleTransferTypeBleConnection = 0,
  BravBleTransferTypeBroadcast = 1,
};

@class BravNativeDevice;
enum BravDeviceProfileType : NSInteger;
enum BravDeviceCategory : NSInteger;

SWIFT_CLASS_NAMED("BravDevice")
@interface BravDevice : NSObject
- (nonnull instancetype)init:(BravNativeDevice * _Nonnull)nativeDevice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, strong) BravNativeDevice * _Nonnull nativeDevice;
@property (nonatomic) enum BravBleTransferType transferType;
@property (nonatomic, copy) NSString * _Nonnull mac;
@property (nonatomic, copy) NSString * _Nonnull modelId;
@property (nonatomic) enum BravDeviceProfileType profileType;
@property (nonatomic) enum BravDeviceCategory category;
@property (nonatomic, copy) NSString * _Nonnull profileId;
@property (nonatomic, readonly) BOOL isBroadcast;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly) NSInteger rssi;
@end

typedef SWIFT_ENUM(NSInteger, BravDeviceCategory, closed) {
  BravDeviceCategoryScale = 0,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BravDeviceConnectionState, "BravDeviceConnectionState", closed) {
  BravDeviceConnectionStateDisconnected = 0,
  BravDeviceConnectionStateConnecting = 1,
  BravDeviceConnectionStateConnected = 2,
  BravDeviceConnectionStateDisconnecting = 3,
};


SWIFT_PROTOCOL_NAMED("BravDeviceEventDelegate")
@protocol BravDeviceEventDelegate
@end


SWIFT_PROTOCOL_NAMED("BravDeviceHandler")
@protocol BravDeviceHandler
@property (nonatomic, readonly, strong) BravDevice * _Nonnull device;
@property (nonatomic, readonly, strong) id <BravBleConnectionChangeDelegate> _Nullable connectionChangeListener;
- (void)onDeviceReadyWithServices:(NSArray<BravBleService *> * _Nonnull)services;
/// 再次出现了该设备的广播信息，该方法用于广播设备的通讯
- (void)onFoundNativeDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice;
/// 解析蓝牙传输过来的数据，空实现,
- (void)decodeDataWithData:(NSArray<NSNumber *> * _Nonnull)data serviceUUid:(NSUUID * _Nonnull)serviceUUid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
/// 关闭掉协议解析，释放资源
- (void)close;
@end



SWIFT_PROTOCOL_NAMED("BravDeviceProfile")
@protocol BravDeviceProfile
@property (nonatomic, readonly, copy) NSString * _Nonnull profileId;
/// <ul>
///   <li>
///     传入原生扫描数据，判断是否可以
///   </li>
/// </ul>
- (BravDevice * _Nullable)acceptDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice SWIFT_WARN_UNUSED_RESULT;
/// 传入设备，返回该设备的处理器
- (id <BravDeviceHandler> _Nonnull)generateHandlerWithHandlerBle:(id <BravDeviceHandlerBle> _Nonnull)handlerBle bravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, BravDeviceProfileType, closed) {
  BravDeviceProfileTypeBravBroadcastScale = 0,
};

typedef SWIFT_ENUM_NAMED(NSInteger, BravErrorCode, "BravErrorCode", closed) {
  BravErrorCodeSuccess = 0,
  BravErrorCodeDeviceNotFound = 1,
  BravErrorCodeBluetoothDisabled = 2,
  BravErrorCodeBluetoothUnauthorized = 3,
  BravErrorCodeBluetoothNotInit = 4,
  BravErrorCodeDeviceProfileNotFind = 5,
};

typedef SWIFT_ENUM(NSInteger, BravGender, closed) {
  BravGenderFemale = 0,
  BravGenderMale = 1,
};

@protocol BravLoggerDelegate;

SWIFT_CLASS("_TtC7BravLib10BravLogger")
@interface BravLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_NONE;)
+ (NSInteger)LOG_LEVEL_NONE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_ERROR;)
+ (NSInteger)LOG_LEVEL_ERROR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LOG_LEVEL_ALL;)
+ (NSInteger)LOG_LEVEL_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger loggerLevel;)
+ (NSInteger)loggerLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerLevel:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <BravLoggerDelegate> _Nullable loggerDelegate;)
+ (id <BravLoggerDelegate> _Nullable)loggerDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerDelegate:(id <BravLoggerDelegate> _Nullable)value;
@end


SWIFT_PROTOCOL_NAMED("BravLoggerDelegate")
@protocol BravLoggerDelegate
- (void)onLogWithTag:(NSString * _Nonnull)tag text:(NSString * _Nonnull)text;
- (void)onErrorWithTag:(NSString * _Nonnull)tag text:(NSString * _Nonnull)text;
@end


SWIFT_CLASS_NAMED("BravNativeDevice")
@interface BravNativeDevice : NSObject
@property (nonatomic, strong) CBPeripheral * _Null_unspecified peripheral;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull advertisementData;
@property (nonatomic) NSInteger rssi;
- (nonnull instancetype)init:(CBPeripheral * _Nullable)peripheral :(NSDictionary<NSString *, id> * _Nonnull)advertisementData :(NSInteger)rssi OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull manufacturerSpecificData;
@end


SWIFT_PROTOCOL_NAMED("BravNativeDeviceDelegate")
@protocol BravNativeDeviceDelegate
/// 蓝牙是否可用状态发生了变化
- (void)onNativeBleEnableChangeWithBleEnableState:(enum BleEnableState)bleEnableState;
/// 发现了本地蓝牙设备
- (void)onNativeDeviceFoundWithDevice:(BravNativeDevice * _Nonnull)device;
/// 本地蓝牙设备的蓝牙连接状态变化
- (void)onNativeDeviceConnectionChangeWithDeviceId:(NSString * _Nonnull)deviceId connectionState:(enum BravDeviceConnectionState)connectionState;
/// 设备发现服务完成
- (void)onNativeDeviceReadyWithDeviceId:(NSString * _Nonnull)deviceId services:(NSArray<BravBleService *> * _Nonnull)services;
/// 本地出现的设备回调
- (void)onNativeDeviceNotifyWithDeviceId:(NSString * _Nonnull)deviceId data:(NSArray<NSNumber *> * _Nonnull)data serviceUuid:(NSUUID * _Nonnull)serviceUuid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
@end


SWIFT_CLASS_NAMED("BravResult")
@interface BravResult : NSObject
@property (nonatomic) enum BravErrorCode code;
@property (nonatomic) id _Nullable data;
@property (nonatomic, readonly) BOOL isSuccess;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BravScaleAlgorithmMethod, closed) {
  BravScaleAlgorithmMethodCommon = 0,
  BravScaleAlgorithmMethodAsia = 1,
};

@class BravUser;
@class BravOriginData;
enum BravScaleUnit : NSInteger;

SWIFT_CLASS_NAMED("BravScaleData")
@interface BravScaleData : NSObject
@property (nonatomic, readonly, strong) BravUser * _Nonnull user;
@property (nonatomic, readonly, strong) BravOriginData * _Nonnull originData;
@property (nonatomic, readonly) enum BravScaleUnit weightUnit;
- (nonnull instancetype)initWithUser:(BravUser * _Nonnull)user originData:(BravOriginData * _Nonnull)originData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) double weight;
@property (nonatomic) double bmi;
@property (nonatomic) double bodyfatRate;
@property (nonatomic) double bodyfatMass;
@property (nonatomic) double subfatRate;
@property (nonatomic) double visfat;
@property (nonatomic) double waterRate;
@property (nonatomic) double waterMass;
@property (nonatomic) NSInteger bmr;
@property (nonatomic) double skeletalMuscleRate;
@property (nonatomic) double skeletalMuscleMass;
@property (nonatomic) double muscleMass;
@property (nonatomic) double muscleRate;
@property (nonatomic) double lbm;
@property (nonatomic) double bone;
@property (nonatomic) double proteinRate;
@property (nonatomic) double proteinMass;
@property (nonatomic) double score;
@property (nonatomic) NSInteger bodyAge;
@property (nonatomic) NSInteger bodyShape;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScaleDataOptions")
@interface BravScaleDataOptions : NSObject
/// 用户资料
@property (nonatomic, readonly, strong) BravUser * _Nonnull user;
/// 秤相关的单位
@property (nonatomic, readonly) enum BravScaleUnit unit;
- (nonnull instancetype)initWithUser:(BravUser * _Nonnull)user unit:(enum BravScaleUnit)unit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScaleDevce")
@interface BravScaleDevce : BravDevice
- (nonnull instancetype)init:(BravNativeDevice * _Nonnull)nativeDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL isScreenOn;
@property (nonatomic, copy) NSArray<NSNumber *> * _Null_unspecified appMac;
@property (nonatomic) double weight;
@property (nonatomic, readonly) BOOL isConnected;
@end


SWIFT_PROTOCOL_NAMED("BravScaleEventDelegate")
@protocol BravScaleEventDelegate <BravDeviceEventDelegate>
/// <ul>
///   <li>
///     回调非稳定重量数据
///   </li>
/// </ul>
- (void)onGetUnsteadyWeight:(NSString * _Nonnull)deviceId :(double)weight;
/// 回调完整的测量数据
- (void)onMeasureComplete:(NSString * _Nonnull)deviceId :(BravScaleData * _Nonnull)scaleData;
- (void)onGetOfflineData:(NSString * _Nonnull)deviceId :(NSArray<BravOriginData *> * _Nonnull)scaleDataList;
@end

@class NSDate;

SWIFT_CLASS_NAMED("BravScaleOriginData")
@interface BravOriginData : NSObject
@property (nonatomic) double weight;
@property (nonatomic) NSInteger impedance;
@property (nonatomic, copy) NSString * _Nonnull mac;
@property (nonatomic, copy) NSDate * _Nonnull times;
@property (nonatomic) enum BravScaleUnit unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(double)weight :(NSInteger)impedance :(NSString * _Nonnull)mac;
- (nonnull instancetype)init:(double)weight :(NSInteger)impedance :(NSString * _Nonnull)mac :(NSDate * _Nonnull)times;
@end

typedef SWIFT_ENUM(NSInteger, BravScaleUnit, closed) {
  BravScaleUnitKg = 0,
  BravScaleUnitJin = 1,
  BravScaleUnitLb = 2,
};


SWIFT_CLASS_NAMED("BravScaleUser")
@interface BravUser : NSObject
@property (nonatomic) enum BravGender gender;
@property (nonatomic) NSInteger height;
@property (nonatomic) NSInteger age;
@property (nonatomic) NSInteger athleteType;
@property (nonatomic) enum BravScaleAlgorithmMethod scaleAlgorithmMethod;
- (nonnull instancetype)initWithGender:(enum BravGender)gender height:(NSInteger)height age:(NSInteger)age OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithGender:(enum BravGender)gender height:(NSInteger)height age:(NSInteger)age athleteType:(NSInteger)athleteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BravScanOptions")
@interface BravScanOptions : NSObject
@property (nonatomic, copy) NSString * _Nullable mac;
@property (nonatomic) NSInteger minRssi;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("BravUtils")
@interface BravUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (double)toPrecision:(double)value :(NSInteger)places SWIFT_WARN_UNUSED_RESULT;
+ (double)kg2jin:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)jin2kg:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)kg2lb:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)lb2kg:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)jin2lb:(double)value SWIFT_WARN_UNUSED_RESULT;
+ (double)lb2jin:(double)value SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7BravLib21BroadcastScaleHandler")
@interface BroadcastScaleHandler : NSObject <BravDeviceHandler>
@property (nonatomic, readonly, strong) BravDevice * _Nonnull device;
@property (nonatomic, strong) id <BravBleConnectionChangeDelegate> _Nullable connectionChangeListener;
- (void)onDeviceReadyWithServices:(NSArray<BravBleService *> * _Nonnull)services;
- (void)onFoundNativeDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice;
- (void)decodeDataWithData:(NSArray<NSNumber *> * _Nonnull)data serviceUUid:(NSUUID * _Nonnull)serviceUUid notifyUUID:(NSUUID * _Nonnull)notifyUUID;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7BravLib21BroadcastScaleProfile")
@interface BroadcastScaleProfile : NSObject <BravDeviceProfile>
@property (nonatomic, readonly, copy) NSString * _Nonnull profileId;
- (BravDevice * _Nullable)acceptDeviceWithNativeDevice:(BravNativeDevice * _Nonnull)nativeDevice SWIFT_WARN_UNUSED_RESULT;
- (id <BravDeviceHandler> _Nonnull)generateHandlerWithHandlerBle:(id <BravDeviceHandlerBle> _Nonnull)handlerBle bravDevice:(BravDevice * _Nonnull)bravDevice options:(NSObject * _Nonnull)options listener:(id <BravDeviceEventDelegate> _Nonnull)listener connectionChangeListener:(id <BravBleConnectionChangeDelegate> _Nullable)connectionChangeListener SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
